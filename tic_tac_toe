from tkinter import *
import random



def next_turn(row,col):
    global player
    if game_buttons[row][col]['text'] == "" and check_winner == False:
        if player == players[0]:
            # put player1 sympol
            game_buttons[row][col]['text'] == player

            if check_winner == False:
               # switch
               player = player[1]
               label.config(text = (players[1] + " turn"))


            elif check_winner() == True:
                label.config(text = (players[0] + " wins!"))

            elif check_winner() == 'tie':
                label.config(text = ( " Tie, No Winner!"))

                
        elif player == players[1]:
            # put player2 sympol
            game_buttons[row][col]['text'] == player

            if check_winner == False:
               # switch
               player = players[0]
               label.config(text = (players[0] + " turn"))


            elif check_winner() == True:
                label.config(text = (players[1] + " wins!"))

            elif check_winner() == 'tie':
                label.config(text = ( " Tie, No Winner!"))


def check_winner():
    # check all horizontal conditions
    for row in range(3):
        if game_buttons[row][0]['text'] == game_buttons[row][1]['text'] == game_buttons[row][2]['text'] != "":
           game_buttons[row][0].config(bg = "cyan")
           game_buttons[row][1].config(bg = "cyan")
           game_buttons[row][2].config(bg = "cyan")
         
           return True
    

    # check all vertical conditions
    for col in range(3):
        if game_buttons[0][col]['text'] == game_buttons[1][col]['text'] == game_buttons[2][col]['text'] != "":
          game_buttons[0][col].config(bg = "cyan")
          game_buttons[1][col].config(bg = "cyan")
          game_buttons[2][col].config(bg = "cyan")
          return True
      

    # check diagonals
    if game_buttons[0][0]['text'] == game_buttons[1][1]['text'] == game_buttons[2][2]['text'] != "":
          game_buttons[0][0].config(bg = "cyan")
          game_buttons[1][1].config(bg = "cyan")
          game_buttons[2][2].config(bg = "cyan")
          return True
    elif game_buttons[0][2]['text'] == game_buttons[1][1]['text'] == game_buttons[2][0]['text'] != "":
           game_buttons[0][2].config(bg = "cyan")
           game_buttons[1][1].config(bg = "cyan")
           game_buttons[2][0].config(bg = "cyan")
           return True
    
    # if there are no empty spaces 
    if check_empty_spaces == False:
        for row in range(3):
            for col in range(3):
                game_buttons[row][col].config(bg='red')
        return 'tie'
    
    else:
        return False



def check_empty_spaces():
    spaces = 9

    for row in range (3):
        for col in range(3):
            if game_buttons[row][col]['text'] != "":
                spaces -=1

    if spaces == 0:
        return False
    else:
        return True
 

def start_new_game():
    global player 
    player = random.choice(players)

    label.config(text= player +" turn")
    for row in range (3):
        for col in range(3):
            game_buttons[row][col].config(text ="" ,bg = "F0F0F0")


window =Tk()
window.title ("tic_tac_toe")

players = ["x" ,"o"]
player = random.choice(players)


game_buttons = [
    [0,0,0],
    [0,0,0],
    [0,0,0]

]

label = Label(text=(player + " turn") , font = ('consolas ' ,40))
label.pack(side = "top")

restart_button = Button(text="restart" , font = ('consolas ' ,20), command =start_new_game)
restart_button.pack(side= 'top')


buttons_frame = Frame(window)
buttons_frame.pack()

for row in range(3):
    for col in range(3):
        game_buttons[row][col] = Button(buttons_frame , text = "",font = ('consolas ' ,50) , width = 4 , hight =1,
        command= lambda row= row , col=col:    next_turn(row,col)       )
        
    game_buttons[row][col].grid(row = row, column = col)


window.mainloop()
